using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Windows.Media.Imaging;
using System.Text;
using System.Threading.Tasks;

namespace UtilsLib
{
    public enum Status
    {
        Ready = 0,
        Busy,
        DisConnected
    }

    public enum EventType
    {
        Info,
        Error,
        Status,
        Result
    }

    public class ImageReceived
    {
        public string device;
        public BitmapSource image;
        public ImageReceived(string device, BitmapSource image)
        {
            this.device = device;
            this.image = image;
        }
    }

    public class DeviceStatus
    {
        public Status status;
        public DeviceStatus(Status status)
        {
            this.status = status;
        }
    }

    public class DeviceEvent
    {
        public string device;
        public object result;

        public DeviceEvent(string d, object r)
        {
            device = d;
            result = r;
        }
    }

    public class GColorEvent
    {
        public EventType eventType;
        public string message;
        public object result;

        public GColorEvent(EventType e, string m, object r)
        {
            eventType = e;
            message = m;
            result = r;
        }
    }

    public class URobotEvent
    {
        public EventType eventType;
        public string message;
        public object result;

        public URobotEvent(EventType e, string m, object r)
        {
            eventType = e;
            message = m;
            result = r;
        }
    }

    public class EventBus
    {
        public static EventBus Instance { get { return instance ?? (instance = new EventBus()); } }

        public void Register(object listener)
        {
            if (!listeners.Any(l => l.Listener == listener))
                listeners.Add(new EventListenerWrapper(listener));
        }

        public void Unregister(object listener)
        {
            listeners.RemoveAll(l => l.Listener == listener);
        }

        public void PostEvent(object e)
        {
            listeners.Where(l => l.EventType == e.GetType()).ToList().ForEach(l => l.PostEvent(e));
        }

        private static EventBus instance;

        private EventBus() { }

        private List<EventListenerWrapper> listeners = new List<EventListenerWrapper>();

        private class EventListenerWrapper
        {
            public object Listener { get; private set; }
            public Type EventType { get; private set; }

            private MethodBase method;

            public EventListenerWrapper(object listener)
            {
                Listener = listener;

                Type type = listener.GetType();

                method = type.GetMethod("OnEvent");
                if (method == null)
                    throw new ArgumentException("Class " + type.Name + " does not containt method OnEvent");

                ParameterInfo[] parameters = method.GetParameters();
                if (parameters.Length != 1)
                    throw new ArgumentException("Method OnEvent of class " + type.Name + " have invalid number of parameters (should be one)");

                EventType = parameters[0].ParameterType;
            }

            public void PostEvent(object e)
            {
                method.Invoke(Listener, new[] { e });
            }
        }
    }

    public class DeviceManager
    {
        public string DeviceName { get; set; }
        public bool Connected = false;
        public DeviceManager() { }

        //public virtual bool Initialize() { return false; }
        public virtual bool ConnectEx() { return false; }
        public virtual bool CalibrateEx() { return false; }
        public virtual bool MeasureEx() { return false; }
    }
}
