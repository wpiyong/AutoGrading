using System;
using System.IO.Ports;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Timers;
using System.Threading.Tasks;
using UtilsLib;

namespace gUVLib.Model
{
    public enum Direction
    {
        CW = 0,
        CCW
    };

    public enum SERVO_MOTOR_MODEL
    {
        ST5Q = 22,
        ST5Plus = 26
    };
#if (ETHERNET)
    public static class ST5
    {
        static System.Timers.Timer _statusTimer = null;
        static UdpClient _udpClient = null;
        static bool _motorEnabled = false;
        static int _stepsPerRevolution = AppSettings.Instance.MotorStepsPerRev;
        static double _velocity;
        static double _continuousVelocity;
        static bool _driveBusy = false;
        static bool _driveConnected = false;
        static Object _statusLock = new Object();
        static SERVO_MOTOR_MODEL _model = SERVO_MOTOR_MODEL.ST5Q;


        public static event EventHandler DriveNotReady;
        public static event EventHandler DriveReady;

        public static int StepsPerRev
        {
            get
            {
                return _stepsPerRevolution;
            }
            set
            {
                _stepsPerRevolution = value;
            }
        }

        public static bool Connect(int numRetries = 1)
        {
            bool found = false;
            _driveConnected = false;

            for (int i = 0; i < numRetries; i++)
            {
                try
                {
                    //App.LogEntry.AddEntry("Trying to connect to Stepper Motor");
                    DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "Trying to connect to Stepper Motor", null));
                    EventBus.Instance.PostEvent(e);

                    _udpClient = new UdpClient(7776);

                    try
                    {
                        _udpClient.Connect(AppSettings.Instance.ST5IPAddress, AppSettings.Instance.ST5Port);

                        WriteLine("PM");
                        System.Threading.Thread.Sleep(1000);
                        if (_udpClient.Available > 0) // is there a packet ready?
                        {
                            string returnData = ReadLine();
                            if(returnData != "" && returnData.Substring(3,1) == "2")
                            {
                                found = true;
                            }
                            else 
                            {
                                WriteLine("PM2");
                                System.Threading.Thread.Sleep(1000);
                                CheckAck();
                                //App.LogEntry.AddEntry("ST5 : Please power cycle the Motor Drive and try connecting again", true);
                                DeviceEvent ee = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 : Please power cycle the Motor Drive and try connecting again", null));
                                UtilsLib.EventBus.Instance.PostEvent(ee);
                                return false;
                            }
                        }

                    }
                    catch(Exception ex)
                    {
                        found = false;
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, ex.Message, null));
                        EventBus.Instance.PostEvent(e);
                    }

                    if (found)
                    {
                        //WriteLine("PR5");
                        //System.Threading.Thread.Sleep(1000);
                        //CheckAck();
                        //WriteLine("SKD"); //Stop and Kill 
                        //System.Threading.Thread.Sleep(1000);
                        //CheckAck();
                        
                        //WriteLine("OP");
                        //System.Threading.Thread.Sleep(1000);
                        //App.LogEntry.AddEntry("ST5 Option Board: " + _serialPort.ReadLine());
                        //e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "ST5 Option Board: " + ReadLine(), null));
                        //EventBus.Instance.PostEvent(e);

                        WriteLine("SC");
                        System.Threading.Thread.Sleep(1000);
                        string response = ReadLine().Substring(3);
                        //App.LogEntry.AddEntry("ST5 Status: 0x" + response);
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "ST5 Status: 0x" + response, null));
                        EventBus.Instance.PostEvent(e);
                        _motorEnabled = (Convert.ToInt32(response.Substring(3, 1)) % 2) == 1;
                        _driveBusy = (Convert.ToInt32(response.Substring(2, 1)) % 2) != 0;

                        Velocity = AppSettings.Instance.MotorVelocity;
                        ContinuousVelocity = AppSettings.Instance.MotorContinuousVelocity;

                        ResetPosition();

                        _statusTimer = new Timer();
                        _statusTimer.Interval = 50;
                        _statusTimer.AutoReset = false;
                        _statusTimer.Elapsed += new ElapsedEventHandler(_statusTimer_Elapsed);
                        _driveConnected = true;

                        //App.LogEntry.AddEntry("Connected to Stepper Motor");
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "Connected to Stepper Motor", null));
                        EventBus.Instance.PostEvent(e);
                        break;
                    }
                    else
                    {
                        if (_udpClient != null)
                        {
                            _udpClient.Close();
                            _udpClient = null;
                        }
                        //App.LogEntry.AddEntry("Could not connect to Stepper Motor", true);
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Could not connect to Stepper Motor", null));
                        EventBus.Instance.PostEvent(e);
                    }

                }
                catch (Exception ex)
                {
                    if (_udpClient != null)
                    {
                        _udpClient.Close();
                        _udpClient = null;
                    }
                    if (i == numRetries - 1)
                    {
                        //App.LogEntry.AddEntry("Could not connect to Stepper Motor : " + ex.Message, true);
                        DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Could not connect to Stepper Motor : " + ex.Message, null));
                        EventBus.Instance.PostEvent(e);
                    }
                    else
                    {
                        //App.LogEntry.AddEntry("Could not connect to Stepper Motor : " + ex.Message);
                        DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Could not connect to Stepper Motor : " + ex.Message, null));
                        EventBus.Instance.PostEvent(e);
                    }
                    _driveConnected = false;
                    System.Threading.Thread.Sleep(500);
                }

            }

            return _driveConnected;
        }

        static void WriteLine(string s)
        {
            if (_udpClient != null)
            {
                Byte[] SCLstring = Encoding.ASCII.GetBytes(s);
                // create a byte array that will be used for the actual
                // transmission
                Byte[] sendBytes = new Byte[SCLstring.Length + 3];
                // insert opcode (07 is used for all SCL commands)
                sendBytes[0] = 0;
                sendBytes[1] = 7;
                // copy string to the byte array
                System.Array.Copy(SCLstring, 0, sendBytes, 2, SCLstring.Length);
                // insert terminator
                sendBytes[sendBytes.Length - 1] = 13; // CR
                                                      // send it to the drive
                _udpClient.Send(sendBytes, sendBytes.Length);
            }
        }

        static string ReadLine()
        {
            string s = "";
            if (_udpClient != null)
            {
                if (_udpClient.Available > 0) // is there a packet ready?
                {
                    // listen to specific host
                    IPEndPoint RemoteIpEndPoint = new IPEndPoint(IPAddress.Parse(AppSettings.Instance.ST5IPAddress), AppSettings.Instance.ST5Port);
                    try
                    {
                        // Get the received packet. Receive method blocks
                        // until a message returns on this socket from a remote host,
                        // so always check .Available to see if a packet is ready.
                        Byte[] receiveBytes = _udpClient.Receive(ref RemoteIpEndPoint);
                        // strip opcode
                        Byte[] SCLstringRec = new byte[receiveBytes.Length - 2];
                        for (int m = 0; m < SCLstringRec.Length; m++)
                            SCLstringRec[m] = receiveBytes[m + 2];
                        s = Encoding.ASCII.GetString(SCLstringRec);
                    }
                    catch (Exception ex)
                    {
                        DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, ex.Message, null));
                        EventBus.Instance.PostEvent(e);
                        s = "";
                    }
                }
            }
            return s;
        }

        static void CheckAck()
        {
            var response = ReadLine();
            if (!response.Contains("%") && !response.Equals("*"))
            {
                throw new ApplicationException("The command was not acknowledged - please try again momentarily.");
            }
        }

        public static void ResetPosition()
        {
            //Apparently we have no encoder so this command is not necessary
            //if (_model == SERVO_MOTOR_MODEL.ST5Q)
            //{
            //    _serialPort.WriteLine("EP0");
            //    CheckAck();
            //}

            WriteLine("SP0");
            System.Threading.Thread.Sleep(1000);
            CheckAck();
        }



        public static void RotateByAngle(int noOfDegrees, Direction _direction)
        {
            int newPosition = (_stepsPerRevolution * noOfDegrees) / 360;

            if (!_motorEnabled)
                EnableMotor();

            if (_direction == Direction.CCW)
                newPosition *= -1;

            try
            {
                WriteLine("FL" + Convert.ToString(newPosition));
                System.Threading.Thread.Sleep(1000);
                CheckAck();
                //wait for motor to start
                do
                {
                    WriteLine("SC");
                    System.Threading.Thread.Sleep(1000);
                    string response = ReadLine();
                    if (response.Length == 7)
                    {
                        response = response.Substring(3);
                        _driveBusy = (Convert.ToInt32(response.Substring(2, 1)) % 2) != 0;
                    }
                } while (!_driveBusy);
                OnDriveNotReady(null);//signal motor started
            }
            catch (Exception ex)
            {
                //App.LogEntry.AddEntry("ST5 RotateByAngle Failed : " + ex.Message);
                DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 RotateByAngle Failed : " + ex.Message, null));
                EventBus.Instance.PostEvent(e);
                return;
            }

            _statusTimer.Start();
        }

        public static void ContinuousMotion(Direction _direction)
        {
            int dir = 1;

            if (!_motorEnabled)
                EnableMotor();

            if (_direction == Direction.CCW)
                dir = -1;

            try
            {
                WriteLine("DI" + dir.ToString());
                System.Threading.Thread.Sleep(1000);
                CheckAck();
                WriteLine("CJ");
                System.Threading.Thread.Sleep(1000);
                CheckAck();
            }
            catch (Exception ex)
            {
                //App.LogEntry.AddEntry("ST5 ContinuousMotion Failed : " + ex.Message);
                DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 ContinuousMotion Failed : " + ex.Message, null));
                EventBus.Instance.PostEvent(e);
                return;
            }

            _statusTimer.Start();
        }

        public static void StopMotor()
        {
            try
            {
                lock (_statusLock)
                {
                    WriteLine("SKD");
                    System.Threading.Thread.Sleep(1000);
                    CheckAck();
                }
            }
            catch (Exception ex)
            {
                //App.LogEntry.AddEntry("ST5 StopMotor : " + ex.Message);
                DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 StopMotor : " + ex.Message, null));
                EventBus.Instance.PostEvent(e);
            }
        }


        public static void DisableMotor()
        {
            WriteLine("MD");
            System.Threading.Thread.Sleep(1000);
            try
            {
                CheckAck();
            }
            catch
            {
                throw;
            }
            _motorEnabled = false;
        }

        public static void EnableMotor()
        {
            WriteLine("ME");
            System.Threading.Thread.Sleep(1000);
            try
            {
                CheckAck();
            }
            catch
            {
                throw;
            }
            _motorEnabled = true;
        }

        public static bool DriveBusy
        {
            get
            {
                return _driveBusy;
            }
        }

        public static bool MotorConnected
        {
            get
            {
                return _driveConnected;
            }
        }



        public static double Velocity
        {
            get
            {
                WriteLine("VE");
                System.Threading.Thread.Sleep(1000);
                string response = ReadLine();
                if (response.Length > 3)
                    _velocity = Convert.ToDouble(response.Substring(3));
                else
                    _velocity = -1;
                return (_velocity);
            }

            set
            {
                if (Math.Abs(value) > 3)
                {
                    throw new ApplicationException("Velocity must not exceed 3 revolutions per second");
                }

                WriteLine("VE" + value.ToString());
                System.Threading.Thread.Sleep(1000);
                try
                {
                    CheckAck();
                }
                catch
                {
                    throw;
                }
                _velocity = value;
            }
        }

        public static double ContinuousVelocity
        {
            get
            {
                WriteLine("JS");
                System.Threading.Thread.Sleep(1000);
                string response = ReadLine();
                if (response.Length > 3)
                    _continuousVelocity = Convert.ToDouble(response.Substring(3));
                else
                    _continuousVelocity = -1;
                return (_continuousVelocity);
            }

            set
            {
                if (Math.Abs(value) > 3)
                {
                    throw new ApplicationException("Continuous velocity must not exceed 3 revolutions per second");
                }

                WriteLine("JS" + value.ToString());
                System.Threading.Thread.Sleep(1000);
                try
                {
                    CheckAck();
                }
                catch
                {
                    throw;
                }
                _continuousVelocity = value;
            }
        }



        static void _statusTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            int responseCode = 1;

            try
            {
                string response = "";
                lock (_statusLock)
                {
                    WriteLine("SC");
                    System.Threading.Thread.Sleep(1000);
                    response = ReadLine();
                }
                if (response.Length == 7)
                {
                    response = response.Substring(3);
                    responseCode = (Convert.ToInt32(response.Substring(2, 1)) % 2);
                }
            }
            catch (Exception /*ex*/)
            {
                // if the check fails, we will try again
                _statusTimer.Start();
                return;
            }

            if (responseCode != 0)
            {
                if (!_driveBusy)
                {
                    _driveBusy = true;
                    OnDriveNotReady(null);
                }
                _statusTimer.Start();
            }
            else
            {
                if (_driveBusy)
                {
                    //when polling very rapidly, the timer elapsed will overlap
                    //so don't keep indicating the motor has stopped
                    _driveBusy = false;
                    OnDriveReady(null);
                }
            }
        }

        static void OnDriveNotReady(EventArgs e)
        {
            if (DriveNotReady != null)
                DriveNotReady(null, e);
        }

        static void OnDriveReady(EventArgs e)
        {
            if (DriveReady != null)
                DriveReady(null, e);
        }
    }
#else
    public static class ST5
    {
        static Timer _statusTimer = null;
        static SerialPort _serialPort = null;
        static bool _motorEnabled = false;
        static int _stepsPerRevolution = AppSettings.Instance.MotorStepsPerRev;
        static double _velocity;
        static double _continuousVelocity;
        static bool _driveBusy = false;
        static bool _driveConnected = false;
        static Object _statusLock = new Object();
        static SERVO_MOTOR_MODEL _model = SERVO_MOTOR_MODEL.ST5Q;


        public static event EventHandler DriveNotReady;
        public static event EventHandler DriveReady;

        public static int StepsPerRev
        {
            get
            {
                return _stepsPerRevolution;
            }
            set
            {
                _stepsPerRevolution = value;
            }
        }

        public static bool Connect(int numRetries = 1)
        {
            bool found = false;
            _driveConnected = false;

            for (int i = 0; i < numRetries; i++)
            {
                try
                {
                    //App.LogEntry.AddEntry("Trying to connect to Stepper Motor");
                    DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "Trying to connect to Stepper Motor", null));
                    EventBus.Instance.PostEvent(e);

                    string[] ports = SerialPort.GetPortNames();
                    found = false;

                    foreach (string port in ports)
                    {
                        try
                        {
                            if (_serialPort != null)
                                _serialPort.Close();

                            if (_statusTimer != null)
                                _statusTimer.Stop();

                            _serialPort = new System.IO.Ports.SerialPort(port, 9600, System.IO.Ports.Parity.None, 8, System.IO.Ports.StopBits.One);
                            _serialPort.DtrEnable = true;
                            _serialPort.NewLine = "\r";
                            _serialPort.Encoding = System.Text.Encoding.ASCII;
                            _serialPort.ReadTimeout = 2000;
                            _serialPort.WriteTimeout = 2000;

                            if (!_serialPort.IsOpen)
                                _serialPort.Open();

                            _serialPort.DiscardInBuffer();
                            _serialPort.DiscardOutBuffer();

                            //write some nulls
                            _serialPort.Write("\0");
                            _serialPort.Write("\0");
                            _serialPort.Write("\0");
                            _serialPort.DiscardInBuffer();
                            _serialPort.DiscardOutBuffer();

                            _serialPort.WriteLine("MV");
                            System.Threading.Thread.Sleep(100);
                            _serialPort.DiscardInBuffer();

                            _serialPort.WriteLine("BR");//baud rate 1 = 9600
                            string response = _serialPort.ReadLine().Substring(3);

                            if (response == "1")
                            {
                                found = true;
                                break;
                            }
                        }
                        catch (Exception ex)
                        {
                            System.Diagnostics.Debug.WriteLine(ex.ToString());
                            if (_serialPort != null)
                                _serialPort.Close();
                        }
                    }

                    if (found)
                    {
                        //make sure in SCL mode
                        _serialPort.WriteLine("PM");
                        if (_serialPort.ReadLine().Substring(3) != "2")
                        {
                            _serialPort.WriteLine("PM2");
                            CheckAck();
                            //App.LogEntry.AddEntry("ST5 : Please power cycle the Motor Drive and try connecting again", true);
                            e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "ST5 : Please power cycle the Motor Drive and try connecting again", null));
                            EventBus.Instance.PostEvent(e);
                            return false;
                        }

                        _serialPort.WriteLine("PR5");
                        CheckAck();
                        _serialPort.WriteLine("SKD"); //Stop and Kill 
                        CheckAck();
                        _serialPort.WriteLine("MV");
                        string mvRead = _serialPort.ReadLine();
                        try
                        {
                            _model = (SERVO_MOTOR_MODEL)Convert.ToInt32(mvRead.Substring(4, 3)); ;
                        }
                        catch (Exception /*ex*/)
                        {
                            //App.LogEntry.AddEntry("Unsupported Motor Drive", true);
                            e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Unsupported Motor Drive", null));
                            EventBus.Instance.PostEvent(e);
                            return false;
                        }
                        //App.LogEntry.AddEntry("ST5 Model/Revision: " + mvRead);
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "ST5 Model/Revision: " + mvRead, null));
                        EventBus.Instance.PostEvent(e);
                        _serialPort.WriteLine("OP");
                        //App.LogEntry.AddEntry("ST5 Option Board: " + _serialPort.ReadLine());
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "ST5 Option Board: " + _serialPort.ReadLine(), null));
                        EventBus.Instance.PostEvent(e);

                        _serialPort.WriteLine("SC");
                        string response = _serialPort.ReadLine().Substring(3);
                        //App.LogEntry.AddEntry("ST5 Status: 0x" + response);
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "ST5 Status: 0x" + response, null));
                        EventBus.Instance.PostEvent(e);
                        _motorEnabled = (Convert.ToInt32(response.Substring(3, 1)) % 2) == 1;
                        _driveBusy = (Convert.ToInt32(response.Substring(2, 1)) % 2) != 0;

                        Velocity = AppSettings.Instance.MotorVelocity;
                        ContinuousVelocity = AppSettings.Instance.MotorContinuousVelocity;

                        _serialPort.DiscardInBuffer();
                        _serialPort.DiscardOutBuffer();

                        ResetPosition();

                        _statusTimer = new Timer();
                        _statusTimer.Interval = 50;
                        _statusTimer.AutoReset = false;
                        _statusTimer.Elapsed += new ElapsedEventHandler(_statusTimer_Elapsed);
                        _driveConnected = true;

                        //App.LogEntry.AddEntry("Connected to Stepper Motor");
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Info, "Connected to Stepper Motor", null));
                        EventBus.Instance.PostEvent(e);
                        break;
                    }
                    else
                    {
                        if (_serialPort != null)
                            _serialPort.Close();
                        //App.LogEntry.AddEntry("Could not connect to Stepper Motor", true);
                        e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Could not connect to Stepper Motor", null));
                        EventBus.Instance.PostEvent(e);
                    }

                }
                catch (Exception ex)
                {
                    if (_serialPort != null)
                        _serialPort.Close();

                    if (i == numRetries - 1)
                    {
                        //App.LogEntry.AddEntry("Could not connect to Stepper Motor : " + ex.Message, true);
                        DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Could not connect to Stepper Motor : " + ex.Message, null));
                        EventBus.Instance.PostEvent(e);
                    }
                    else
                    {
                        //App.LogEntry.AddEntry("Could not connect to Stepper Motor : " + ex.Message);
                        DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "Could not connect to Stepper Motor : " + ex.Message, null));
                        EventBus.Instance.PostEvent(e);
                    }
                    _driveConnected = false;
                    System.Threading.Thread.Sleep(500);
                }

            }

            return _driveConnected;
        }

        static void CheckAck()
        {
            var response = _serialPort.ReadLine();
            if (!response.Equals("%") && !response.Equals("*"))
            {
                throw new ApplicationException("The command was not acknowledged - please try again momentarily.");
            }
        }

        public static void ResetPosition()
        {
            //Apparently we have no encoder so this command is not necessary
            //if (_model == SERVO_MOTOR_MODEL.ST5Q)
            //{
            //    _serialPort.WriteLine("EP0");
            //    CheckAck();
            //}

            _serialPort.WriteLine("SP0");
            CheckAck();
        }



        public static void RotateByAngle(int noOfDegrees, Direction _direction)
        {
            int newPosition = (_stepsPerRevolution * noOfDegrees) / 360;

            if (!_motorEnabled)
                EnableMotor();

            if (_direction == Direction.CCW)
                newPosition *= -1;

            try
            {
                _serialPort.WriteLine("FL" + Convert.ToString(newPosition));
                CheckAck();
                //wait for motor to start
                do
                {
                    _serialPort.WriteLine("SC");
                    string response = _serialPort.ReadLine();
                    if (response.Length == 7)
                    {
                        response = response.Substring(3);
                        _driveBusy = (Convert.ToInt32(response.Substring(2, 1)) % 2) != 0;
                    }
                } while (!_driveBusy);
                OnDriveNotReady(null);//signal motor started
            }
            catch (Exception ex)
            {
                //App.LogEntry.AddEntry("ST5 RotateByAngle Failed : " + ex.Message);
                DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 RotateByAngle Failed : " + ex.Message, null));
                EventBus.Instance.PostEvent(e);
                return;
            }

            _statusTimer.Start();
        }

        public static void ContinuousMotion(Direction _direction)
        {
            int dir = 1;

            if (!_motorEnabled)
                EnableMotor();

            if (_direction == Direction.CCW)
                dir = -1;

            try
            {
                _serialPort.WriteLine("DI" + dir.ToString());
                CheckAck();
                _serialPort.WriteLine("CJ");
                CheckAck();
            }
            catch (Exception ex)
            {
                //App.LogEntry.AddEntry("ST5 ContinuousMotion Failed : " + ex.Message);
                DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 ContinuousMotion Failed : " + ex.Message, null));
                EventBus.Instance.PostEvent(e);
                return;
            }

            _statusTimer.Start();
        }

        public static void StopMotor()
        {
            try
            {
                lock (_statusLock)
                {
                    _serialPort.WriteLine("SKD");
                    CheckAck();
                }
            }
            catch (Exception ex)
            {
                //App.LogEntry.AddEntry("ST5 StopMotor : " + ex.Message);
                DeviceEvent e = new DeviceEvent("AccuFluo", new GUVEvent(EventType.Error, "ST5 StopMotor : " + ex.Message, null));
                EventBus.Instance.PostEvent(e);
            }
        }


        public static void DisableMotor()
        {
            _serialPort.WriteLine("MD");
            try
            {
                CheckAck();
            }
            catch
            {
                throw;
            }
            _motorEnabled = false;
        }

        public static void EnableMotor()
        {
            _serialPort.WriteLine("ME");
            try
            {
                CheckAck();
            }
            catch
            {
                throw;
            }
            _motorEnabled = true;
        }

        public static bool DriveBusy
        {
            get
            {
                return _driveBusy;
            }
        }

        public static bool MotorConnected
        {
            get
            {
                return _driveConnected;
            }
        }



        public static double Velocity
        {
            get
            {
                _serialPort.WriteLine("VE");
                string response = _serialPort.ReadLine();
                if (response.Length > 3)
                    _velocity = Convert.ToDouble(response.Substring(3));
                else
                    _velocity = -1;
                return (_velocity);
            }

            set
            {
                if (Math.Abs(value) > 3)
                {
                    throw new ApplicationException("Velocity must not exceed 3 revolutions per second");
                }

                _serialPort.WriteLine("VE" + value.ToString());
                try
                {
                    CheckAck();
                }
                catch
                {
                    throw;
                }
                _velocity = value;
            }
        }

        public static double ContinuousVelocity
        {
            get
            {
                _serialPort.WriteLine("JS");
                string response = _serialPort.ReadLine();
                if (response.Length > 3)
                    _continuousVelocity = Convert.ToDouble(response.Substring(3));
                else
                    _continuousVelocity = -1;
                return (_continuousVelocity);
            }

            set
            {
                if (Math.Abs(value) > 3)
                {
                    throw new ApplicationException("Continuous velocity must not exceed 3 revolutions per second");
                }

                _serialPort.WriteLine("JS" + value.ToString());
                try
                {
                    CheckAck();
                }
                catch
                {
                    throw;
                }
                _continuousVelocity = value;
            }
        }



        static void _statusTimer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            int responseCode = 1;

            try
            {
                string response = "";
                lock (_statusLock)
                {
                    _serialPort.DiscardInBuffer();
                    _serialPort.WriteLine("SC");
                    response = _serialPort.ReadLine();
                }
                if (response.Length == 7)
                {
                    response = response.Substring(3);
                    responseCode = (Convert.ToInt32(response.Substring(2, 1)) % 2);
                }
            }
            catch (Exception /*ex*/)
            {
                // if the check fails, we will try again
                _statusTimer.Start();
                return;
            }

            if (responseCode != 0)
            {
                if (!_driveBusy)
                {
                    _driveBusy = true;
                    OnDriveNotReady(null);
                }
                _statusTimer.Start();
            }
            else
            {
                if (_driveBusy)
                {
                    //when polling very rapidly, the timer elapsed will overlap
                    //so don't keep indicating the motor has stopped
                    _driveBusy = false;
                    OnDriveReady(null);
                }
            }
        }

        static void OnDriveNotReady(EventArgs e)
        {
            if (DriveNotReady != null)
                DriveNotReady(null, e);
        }

        static void OnDriveReady(EventArgs e)
        {
            if (DriveReady != null)
                DriveReady(null, e);
        }

    }
#endif
}
