using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UtilsLib;
using gColorLib;
using ViewModelLib;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Threading;
using System.Collections.ObjectModel;

namespace AutoGrading.ViewModel
{
    enum DeviceType
    {
        ColorMeter =0,
        //AccuFlor,
        //DPL,
        Size
    };

    public class ControlViewModel : ViewModelLib.ViewModelBase
    {
        List<DeviceManager> DeviceManagers = new List<DeviceManager>();

        public LogEntryViewModel LogEntryVM { get { return App.LogEntry; } }

        public RelayCommand CommandConnectAll { get; set; }
        public RelayCommand CommandStageSettings { get; set; }
        public RelayCommand CommandCalibrateAll { get; set; }
        public RelayCommand CommandMeasureAll { get; set; }

        ManualResetEvent ProcessEvent = new ManualResetEvent(false);
        
        public ObservableCollection<string> Devices { get; set; }

        public ControlViewModel()
        {
            Devices = new ObservableCollection<string>();
            for(int i = 0; i < (int)DeviceType.Size; i++)
            {
                if(((DeviceType)i).ToString() == "ColorMeter")
                {
                    gColorManager manager = new gColorManager("ColorMeter");
                    DeviceManagers.Add(manager);
                    manager.AddImageReceivedEventSubscriber(ImageReceivedHandler);
                    Devices.Add(manager.DeviceName);
                }
            }

            CommandConnectAll = new RelayCommand(param => ConnectAll());
            CommandStageSettings = new RelayCommand(param => StageSettings());
            CommandCalibrateAll = new RelayCommand(param => CalibrateAll());
            CommandMeasureAll = new RelayCommand(param => MeasureAll());

            EventBus.Instance.Register(this);
        }

        BitmapSource _gColorImage;
        public BitmapSource GColorImage
        {
            get { return _gColorImage; }
            set
            {
                _gColorImage = value;
                OnPropertyChanged("GColorImage");
            }
        }


        public void ConnectingDevices()
        {

        }

        void ConnectAll()
        {
            for(int i = 0; i < DeviceManagers.Count; i++)
            {
                DeviceManager dm = DeviceManagers[i];
                dm.ConnectEx();
            }
        }

        void StageSettings()
        {

        }

        void CalibrateAll()
        {
            for (int i = 0; i < DeviceManagers.Count; i++)
            {
                DeviceManager dm = DeviceManagers[i];
                dm.CalibrateEx();
            }
        }

        void MeasureAll()
        {
            for (int i = 0; i < DeviceManagers.Count; i++)
            {
                ProcessEvent.Reset();
                DeviceManager dm = DeviceManagers[i];
                dm.MeasureEx();
                //ProcessEvent.WaitOne();
            }
        }

        void ImageReceivedHandler(ImageReceived image)
        {
            if(image.device == DeviceType.ColorMeter.ToString())
            {
                GColorImage = image.image;
            }
        }

        public void OnEvent(DeviceEvent e)
        {
            // event process
            if (e.device == DeviceType.ColorMeter.ToString())
            {
                ProcessGColorEvent((GColorEvent)e.result);
            }

            
        }

        void ProcessGColorEvent(GColorEvent e)
        {
            if(e.eventType == EventType.Info)
            {

            } else if (e.eventType == EventType.Error)
            {

            } else if (e.eventType == EventType.Status)
            {

            } else if(e.eventType == EventType.Status)
            {

            }

            Application.Current.Dispatcher.Invoke((Action)(() => LogEntryVM.AddEntry(e.message)));
        }

        #region dispose
        private bool _disposed = false;

        protected override void OnDispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        void Dispose(bool disposing)
        {
            if (!_disposed)
            {
                if (disposing)
                {
                    //
                }
                _disposed = true;
            }
        }
        #endregion
    }
}
